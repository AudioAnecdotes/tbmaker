#!/usr/bin/perl

sub doManifest()
{
	my $MANIFEST="manifest";
	my $DISTTYPE="";
	my $TARLOCS="";
	my $TMPDIR="";

	$argc=scalar(@ARGV);
	$dir=`pwd`;

	if ($argc == 3)
	{
		print "args = @ARGV\n";

		$DISTTYPE=$ARGV[0];
		$TARLOCS=$ARGV[1];
		$TMPDIR=$ARGV[2];
	}
	else
	{
		print STDERR "usage: tbmaker distribution archive tmpdir\n";
		exit -1;
	}
	if (!open(FILE,"<$MANIFEST"))
	{
		print STDERR "Can't open manifest file $MANIFEST\n";
		exit -1;
	}

	print "Reading manifest from file $MANIFEST in directory $dir\n";
	LINELOOP: while ($line=<FILE>)
	{
		# skip blank lines
		next LINELOOP if ($line eq '');

		# skip comments (#) and works-in-process (^)
		next LINELOOP if (substr($line,0,1) eq "#");
		next LINELOOP if (substr($line,0,1) eq "^");

		# split fields on whitespace
		@parts=split(/\s+/,$line);

		# first field could be a comma delimited list parse into array
		@distributionList=split(/,/,@parts[0]);
                my $element;
		my $found=0;
		foreach $distribution(@distributionList) {
			if ($distribution eq "$DISTTYPE") {
				$found=1;
			}
		}

		if ($found)
		{
			print "processing: $line\n";
			if (&processLine(@parts[1],"$TARLOCS@parts[2]",@parts[3],$TMPDIR))
			{
				print "\tError processing line\n";
				exit -1;
			}
		}
	}
        continue {
		if ($line eq '') 		{ print "ignoring blank line\n"; }
		if (substr($line,0,1) eq "#") 	{ print "ignoring comment: $line\n"; }
		if (substr($line,0,1) eq "^") 	{ print "ignoring pending: $line\n"; }
        }
	return 0;
}

sub processLine($$$$)
{
	my ($local,$tar,$install,$tmploc)=@_;
	if (length($local)==0 || length($tar)==0 || length($install)==0)
	{
		return 1;
	}

	$errors=system("test -e $local");
	if ($errors) { 
		print "tbmaker: $local not found\n"; 
		return 2;
	}

	@dirparts=split(/\//,$install);
	$p="";
	for ($i=0;$i<scalar(@dirparts)-1;$i++)
	{
		$p="$p@dirparts[$i]/";
	}

    # locate copyright files created by copyright.pl
	@tmpparts = split(/\//,$tmploc);
	$path = '';
    for($i=0; $i<scalar(@tmpparts);$i++)
	{
		$path .= @tmpparts[$i];
		$path .= '/';
		if (@tmpparts[$i] eq 'aadevtree2') 
		{ 
			last ;
		}
	}

    # Check tar to see which volume it is encoding and use appropriate file
print "tar $tar";
    my $crfile="";
    if ($tar=~/v1/)
    {
       $crfile=copyright;
    }
    elsif ($tar=~/v2/)
    {
       $crfile=copyright2;
    }
    elsif ($tar=~/v3/)
    {
       $crfile=copyright3;
    }
    else
    {
	print STDERR "tbmaker couldn't determine makefile version from $tar\n";
	exit -1;
    }

    $copyrightsrc = $path . $crfile . '.src';
    $copyrightmak = $path . $crfile . '.mak';
	print "copyright files = $copyrightsrc $copyrightmak \n";

	$mkdircmd="mkdir -p $tmploc/$p 2>&1";
	$throwaway=`$mkdircmd`;

  	# copy file to tmp dir for tarring; src|mak files get copyright notice
  	if ($local =~ m/\.(c$|cpp$|h$)/) 
	{
  		$cpcmd="cat $copyrightsrc $local > $tmploc/$install 2>&1"; 
  	} 
	elsif ($local =~ m/\.(in$|mak$)/) 
	{
  		$cpcmd="cat $copyrightmak $local > $tmploc/$install 2>&1"; 
  	} 
	else 
	{
		$cpcmd="cp -f $local $tmploc/$install 2>&1";
  	}
	$errors=`$cpcmd`;
	if ($errors) { 
		print "cp or cat err on file: $local\n"; 
		return 2;
	}

        # all html files need to be in unix format 
  	if ($local =~ m/\.(html$|htm$|css$|js$|cgi$|m$|txt$)/) 
	{
		$dos2unix="dos2unix $tmploc/$install 2>&1";
		$throwaway=`$dos2unix`;
		print "$dos2unix\n";
	}

        # most files being served can't be executable
  	if ($local =~ m/\.(m$|html$|htm$|wav$|gif$|pdf$|mpg$|mp3$|js$)/) 
        {
		$chcmd="chmod a-x $tmploc/$install 2>&1";
		$throwaway=`$chcmd`;
		print "$chcmd\n";
        }

        # some should be executable
  	if ($local =~ m/\.(cgi$)/) 
        {
		$chcmd="chmod a+x $tmploc/$install 2>&1";
		$throwaway=`$chcmd`;
		print "$chcmd\n";
        }

	# all files (especially src) need to be writable
	$chcmd="chmod a+w+r $tmploc/$install 2>&1";
	$throwaway=`$chcmd`;



	# debugging info	
	#print "cp -f $local $tmploc/$install \n";
	print "$cpcmd \n";
	print "\tAdding file $local to tar file $tar to location $install\n";

	# finally, add file to tarball
	$tarcmd="tar -uf $tar -C $tmploc $install 2>&1";
	$errors=`$tarcmd`;
	if ($errors) { 
           print "tar err on file: $local\n"; 
           return(3);
        }
        else {
	   return(0);
        }
           

	# return !length($errors);
}

&doManifest();
